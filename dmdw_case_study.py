# -*- coding: utf-8 -*-
"""DMDW_CASE_STUDY.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17GUIO2De4gQtcw8Gc3yYQICYERL4dg4g
"""

!pip install selenium

pip install  dash_bootstrap_components

!pip install dash

import pandas as pd
import plotly.express as px
from dash import Dash, dcc, html, ctx
from dash.dependencies import Input, Output

# Load the data from Excel file
xls = pd.ExcelFile('/content/Jul_3RD-B.Tech-ATTENDANCE.xlsx')
sheet_names = xls.sheet_names

all_attendance_data = []

for sheet_name in sheet_names:
    try:
        df = pd.read_excel(xls, sheet_name=sheet_name, skiprows=4)
        existing_columns = df.columns.tolist()
        new_columns = [
            "SL_NO", "REGN_NO", "NAME", "BRANCH", "SUBJECT_1_CLASS_HELD", "SUBJECT_1_CLASS_ATTEND",
            "SUBJECT_1_ATTENDANCE_PERCENT", "SUBJECT_2_CLASS_HELD", "SUBJECT_2_CLASS_ATTEND",
            "SUBJECT_2_ATTENDANCE_PERCENT"
        ]
        if len(existing_columns) > len(new_columns):
            new_columns += [f"EXTRA_{i}" for i in range(len(new_columns), len(existing_columns))]
        df.columns = new_columns

        df.dropna(axis=1, how='all', inplace=True)  # Remove empty columns
        df.dropna(subset=["SL_NO", "REGN_NO"], inplace=True)  # Remove rows with missing essentials
        df.reset_index(drop=True, inplace=True)

        # Add a 'Group' column to the DataFrame
        df['Group'] = sheet_name

        all_attendance_data.append(df)
    except Exception as e:
        print(f"Error loading sheet '{sheet_name}': {e}")

# Concatenate all DataFrames into a single DataFrame
combined_df = pd.concat(all_attendance_data, ignore_index=True)

# Calculate summaries
student_attendance = combined_df.groupby(['REGN_NO', 'NAME']).mean(numeric_only=True)
subject_summary = combined_df.groupby('Group')[['SUBJECT_1_ATTENDANCE_PERCENT', 'SUBJECT_2_ATTENDANCE_PERCENT']].mean()
branch_attendance = combined_df.groupby('BRANCH')['SUBJECT_1_ATTENDANCE_PERCENT'].mean()
group_average_attendance = combined_df.groupby('Group')['SUBJECT_1_ATTENDANCE_PERCENT'].mean()

# Initialize Dash app
app = Dash(__name__)

# CSS Styling and Layout
app.layout = html.Div(style={'backgroundColor': '#f5f5f5', 'fontFamily': 'Arial, sans-serif'}, children=[
    html.H1("Comprehensive Attendance Dashboard",
            style={'textAlign': 'center', 'color': '#fff', 'padding': '10px',
                   'backgroundColor': '#4CAF50', 'borderRadius': '8px'}),

    html.Div([  # Dropdown for Group Selection
        html.Label("Select a Group:"),
        dcc.Dropdown(
            id='group-dropdown',
            options=[{'label': name, 'value': name} for name in group_average_attendance.index],
            value=group_average_attendance.index[0],
            style={'width': '50%', 'margin': '10px auto'}
        )
    ], style={'textAlign': 'center'}),

    html.Div([  # Overall Attendance Chart by Student
        html.H2("Overall Attendance by Student", style={'color': '#333'}),
        dcc.Graph(id='overall-attendance-chart'),
    ], style={'backgroundColor': '#fff', 'padding': '20px', 'borderRadius': '8px', 'marginBottom': '20px',
              'boxShadow': '0 4px 8px rgba(0,0,0,0.2)'}),

    html.Div([  # Subject Attendance Summary
        html.H2("Subject-wise Attendance Summary", style={'color': '#333'}),
        dcc.Graph(id='subject-attendance-chart', figure=px.bar(
            subject_summary.reset_index().melt(id_vars='Group'),
            x='Group', y='value', color='variable', title='Average Attendance Rate by Subject',
            labels={'value': 'Attendance Rate (%)', 'variable': 'Subject'}
        )),
    ], style={'backgroundColor': '#fff', 'padding': '20px', 'borderRadius': '8px', 'marginBottom': '20px',
              'boxShadow': '0 4px 8px rgba(0,0,0,0.2)'}),

    html.Div([  # Branch Attendance Summary
        html.H2("Average Attendance Rate by Branch", style={'color': '#333'}),
        dcc.Graph(id='branch-attendance-chart', figure=px.pie(
            branch_attendance, values=branch_attendance.values, names=branch_attendance.index,
            title='Average Attendance Rate by Branch'
        )),
    ], style={'backgroundColor': '#fff', 'padding': '20px', 'borderRadius': '8px', 'marginBottom': '20px',
              'boxShadow': '0 4px 8px rgba(0,0,0,0.2)'}),

    html.Div([  # Group Attendance Summary
        html.H2("Average Attendance by Group", style={'color': '#333'}),
        dcc.Graph(id='group-attendance-chart'),
    ], style={'backgroundColor': '#fff', 'padding': '20px', 'borderRadius': '8px', 'marginBottom': '20px',
              'boxShadow': '0 4px 8px rgba(0,0,0,0.2)'}),

    html.Div([  # Minimum Attendance Slider
        html.Label("Set Minimum Attendance Percentage:"),
        dcc.Slider(
            id='min-attendance-slider',
            min=0,
            max=100,
            value=75,
            marks={i: str(i) for i in range(0, 101, 10)},
            step=1,
            tooltip={"placement": "bottom", "always_visible": True},
        ),
    ], style={'textAlign': 'center', 'margin': '20px'}),

    html.Div([  # Low Attendance Table with Buttons
        html.H2("Students with Low Attendance", style={'color': '#333'}),
        html.Div([
            html.Button('Show Subject 1 Low Attendance', id='show-subject1', n_clicks=0,
                        style={'marginRight': '10px', 'padding': '15px 30px', 'fontSize': '16px',
                               'backgroundColor': '#4CAF50', 'color': 'white', 'border': 'none',
                               'borderRadius': '5px', 'cursor': 'pointer', 'transition': 'background-color 0.3s',
                               'boxShadow': '0 2px 5px rgba(0,0,0,0.2)'}),
            html.Button('Show Subject 2 Low Attendance', id='show-subject2', n_clicks=0,
                        style={'padding': '15px 30px', 'fontSize': '16px',
                               'backgroundColor': '#4CAF50', 'color': 'white', 'border': 'none',
                               'borderRadius': '5px', 'cursor': 'pointer', 'transition': 'background-color 0.3s',
                               'boxShadow': '0 2px 5px rgba(0,0,0,0.2)'}),
        ], style={'textAlign': 'center', 'margin': '10px'}),

        # Container for Tables
        html.Div(id='low-attendance-table', style={'marginTop': '20px'}),
    ], style={'backgroundColor': '#fff', 'padding': '20px', 'borderRadius': '8px', 'marginBottom': '20px',
              'boxShadow': '0 4px 8px rgba(0,0,0,0.2)'}),
])

# Callback to update overall attendance and group summary charts
@app.callback(
    Output('overall-attendance-chart', 'figure'),
    Output('group-attendance-chart', 'figure'),
    Input('group-dropdown', 'value')
)
def update_charts(selected_group):
    filtered_df = combined_df[combined_df['Group'] == selected_group]

    overall_attendance_fig = px.bar(
        filtered_df,
        x='NAME', y='SUBJECT_1_ATTENDANCE_PERCENT',
        title=f'Overall Attendance Percentage for {selected_group}',
        labels={'SUBJECT_1_ATTENDANCE_PERCENT': 'Attendance (%)'}
    )

    group_attendance_fig = px.bar(
        group_average_attendance,
        x=group_average_attendance.index, y=group_average_attendance.values,
        title='Average Attendance by Group',
        labels={'x': 'Group', 'y': 'Average Attendance (%)'}
    )

    return overall_attendance_fig, group_attendance_fig

# Callback for low attendance tables for Subject 1 and Subject 2 based on button clicks
@app.callback(
    Output('low-attendance-table', 'children'),
    Input('show-subject1', 'n_clicks'),
    Input('show-subject2', 'n_clicks'),
    Input('group-dropdown', 'value'),
    Input('min-attendance-slider', 'value')
)
def update_low_attendance_table(show_subj1, show_subj2, selected_group, min_attendance):
    filtered_df = combined_df[combined_df['Group'] == selected_group]

    low_attendance_subject1 = filtered_df[filtered_df['SUBJECT_1_ATTENDANCE_PERCENT'] < min_attendance]
    low_attendance_subject2 = filtered_df[filtered_df['SUBJECT_2_ATTENDANCE_PERCENT'] < min_attendance]

    if ctx.triggered_id == 'show-subject1':
        if not low_attendance_subject1.empty:
            return html.Table(style={'borderCollapse': 'collapse', 'width': '100%', 'marginTop': '10px'}, children=[
                html.Thead(
                    html.Tr([
                        html.Th("Registration Number"),
                        html.Th("Name"),
                        html.Th("Attendance %"),
                    ], style={'backgroundColor': '#4CAF50', 'color': 'white'})
                ),
                html.Tbody([
                    html.Tr([
                        html.Td(row['REGN_NO']),
                        html.Td(row['NAME']),
                        html.Td(f"{row['SUBJECT_1_ATTENDANCE_PERCENT']:.2f} %")
                    ]) for _, row in low_attendance_subject1.iterrows()
                ])
            ])
        else:
            return "No students with low attendance in Subject 1."

    elif ctx.triggered_id == 'show-subject2':
        if not low_attendance_subject2.empty:
            return html.Table(style={'borderCollapse': 'collapse', 'width': '100%', 'marginTop': '10px'}, children=[
                html.Thead(
                    html.Tr([
                        html.Th("Registration Number"),
                        html.Th("Name"),
                        html.Th("Attendance %"),
                    ], style={'backgroundColor': '#4CAF50', 'color': 'white'})
                ),
                html.Tbody([
                    html.Tr([
                        html.Td(row['REGN_NO']),
                        html.Td(row['NAME']),
                        html.Td(f"{row['SUBJECT_2_ATTENDANCE_PERCENT']:.2f} %")
                    ]) for _, row in low_attendance_subject2.iterrows()
                ])
            ])
        else:
            return "No students with low attendance in Subject 2."

if __name__ == '__main__':
    app.run_server(debug=True)